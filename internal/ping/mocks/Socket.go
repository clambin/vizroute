// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	icmp "golang.org/x/net/icmp"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// Socket is an autogenerated mock type for the Socket type
type Socket struct {
	mock.Mock
}

type Socket_Expecter struct {
	mock *mock.Mock
}

func (_m *Socket) EXPECT() *Socket_Expecter {
	return &Socket_Expecter{mock: &_m.Mock}
}

// Ping provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Socket) Ping(_a0 net.IP, _a1 uint16, _a2 uint8, _a3 []byte) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(net.IP, uint16, uint8, []byte) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Socket_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Socket_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - _a0 net.IP
//   - _a1 uint16
//   - _a2 uint8
//   - _a3 []byte
func (_e *Socket_Expecter) Ping(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *Socket_Ping_Call {
	return &Socket_Ping_Call{Call: _e.mock.On("Ping", _a0, _a1, _a2, _a3)}
}

func (_c *Socket_Ping_Call) Run(run func(_a0 net.IP, _a1 uint16, _a2 uint8, _a3 []byte)) *Socket_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(net.IP), args[1].(uint16), args[2].(uint8), args[3].([]byte))
	})
	return _c
}

func (_c *Socket_Ping_Call) Return(_a0 error) *Socket_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Socket_Ping_Call) RunAndReturn(run func(net.IP, uint16, uint8, []byte) error) *Socket_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: _a0
func (_m *Socket) Read(_a0 context.Context) (net.IP, icmp.Type, uint16, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 net.IP
	var r1 icmp.Type
	var r2 uint16
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context) (net.IP, icmp.Type, uint16, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) net.IP); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.IP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) icmp.Type); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(icmp.Type)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) uint16); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Get(2).(uint16)
	}

	if rf, ok := ret.Get(3).(func(context.Context) error); ok {
		r3 = rf(_a0)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Socket_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type Socket_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Socket_Expecter) Read(_a0 interface{}) *Socket_Read_Call {
	return &Socket_Read_Call{Call: _e.mock.On("Read", _a0)}
}

func (_c *Socket_Read_Call) Run(run func(_a0 context.Context)) *Socket_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Socket_Read_Call) Return(_a0 net.IP, _a1 icmp.Type, _a2 uint16, _a3 error) *Socket_Read_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *Socket_Read_Call) RunAndReturn(run func(context.Context) (net.IP, icmp.Type, uint16, error)) *Socket_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewSocket creates a new instance of Socket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSocket(t interface {
	mock.TestingT
	Cleanup(func())
}) *Socket {
	mock := &Socket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
